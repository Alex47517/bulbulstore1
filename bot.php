<?php
require 'start.php';
//===
$request_json = file_get_contents('php://input');
$request = json_decode($request_json);
$user_id = $request->message->from->id;
$chat_id = $request->message->chat->id;
$msg_id = $request->message->message_id;
if ($request->callback_query->from->id) {
$user_id = $request->callback_query->from->id;
$chat_id = $request->callback_query->message->chat->id;
$payload = $request->callback_query->data;
}
if (!$user_id) {
die();
}
$msg = $request->message->text;
$cmd = explode(' ', $msg);
// if ($msg) {
//  send('–≠–†–û–†–† $'); die();
// }
$user = R::findOne('users', 'user_id = ?', array($user_id));
if ($cmd[0] == '!chat' or $cmd[0] == '/chat' or $cmd[1] == '!chat') {
send($chat_id, false, true);
}
//if ($chat_id == $admin_chat) {
//}
if ($user) {
if ($cmd[0] == '/start' or $cmd[0] == '/cancel' or $msg == '‚ùå –û—Ç–º–µ–Ω–∞' or $msg == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
$user->display = null;
R::store($user);
$pr = array_values(R::getAll('SELECT * FROM newproducts WHERE old_sum AND disabled = 0'));
$txt = 'üè† <b>–ë—É–ª—å-–ë—É–ª—å</b> ADMIN
üÜî ID: '.$user['id'].'
üéØ Telegram ID: <code>'.$user_id.'</code>
üìö <b>–¢–æ–≤–∞—Ä:</b>
–ê–∫—Ç–∏–≤–Ω–æ: <b>'.count(array_values(R::getAll('SELECT * FROM `newproducts` WHERE `disabled` = ?', [0]))).'</b>
–í—Å–µ–≥–æ: <b>'.R::count('newproducts').'</b>
';
keyboard_home('üëã');
$keyboard = array(array(
array(
'text' => '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
'callback_data' => 'btn1'
)
),
array(
array(
'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º',
'callback_data' => 'btn2'
)
),
array(
array(
'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
'callback_data' => 'btn3'
)
),
array(
array(
'text' => '‚≠ê –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã',
'callback_data' => 'btn4'
)
)
);
inline_keyboard($txt, $keyboard);
if (!$pr[2]) {
    send('‚ö† <b>–ë–ª–æ–∫ –∞–∫—Ü–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∫—Ä—ã—Ç</b>
–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ü–∏–∏ —Ö–æ—Ç—è-–±—ã –Ω–∞ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–ª–æ–∫–∞
<b>–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ –∞–∫—Ü–∏–π: '.count($pr).'</b>');
}
die();
} elseif ($cmd[0] == '!–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞') {
keyboardRemove('‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞');
}
//displays
if ($user['display'] == 'youtube') {
    send('$user[display] == youtube');
    $ad = R::load('newproducts', $user['tmp']);
    if (stristr($msg, 'youtu.be')) {
        $k = end(explode('/', $msg));
    } elseif (stristr($msg, 'youtube.com/')) {
        $k = explode('v=', $msg)[1];
        if (stristr($msg, '&')) {
            $k = explode('&', $k)[0];
        }
    } else {
        send('‚ô® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ youtube –≤–∏–¥–µ–æ'); die();
    }
    send(var_export($k, true));
    $ad->video = $k;
    send('R::store');
    R::store($ad);
    send('done!');
    $user->display = null;
    $user->tmp = null;
    R::store($user);
    send('‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'); die();
}
if (($user['display'] == 'red_category' or $user['display'] == 'red_category1') && $payload) {
    $childcategorys = array_values(R::getAll('SELECT * FROM childcategorys WHERE father = '.$payload));
    if ($payload == 'clear') {
        $payload = null;
    }
    if ($childcategorys && $user['display'] == 'red_category') {
        $user->display = 'red_category1';
        $user->tmp .= ':'.$payload.'';
        R::store($user);
        for ($i=0; $childcategorys[$i]; $i++) { 
            $keyboard[$i][0]['text'] = 'üóÇ '.$childcategorys[$i]['name'];
            $keyboard[$i][0]['callback_data'] = $childcategorys[$i]['id'];
        }
        $keyboard[$i][0]['text'] = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°';
        $keyboard[$i][0]['callback_data'] = 'clear';
        inline_keyboard('üî∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', $keyboard); die();
    }
    $product = R::load('newproducts', explode(':', $user['tmp'])[0]);
    if (!explode(':', $user['tmp'])[1]) {
        $product->category = $payload;
    } else {
        $product->category = explode(':', $user['tmp'])[1];
        $product->childcategory = $payload;
    }
    R::store($product);
    $user->display = null;
    $user->tmp = null;
    R::store($user);
    keyboard_home('‚úÖ –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'); die();
}
if ($user['display'] == 'new_childcategory' && $msg) {
    $category = R::load('categorys', $user['tmp']);
    if ($category) {
        $childcategory = R::dispense('childcategorys');
        $childcategory->name = $msg;
        $childcategory->url_name = translit_sef($msg);
        $childcategory->father = $user['tmp'];
        R::store($childcategory);
        $user->display = null;
        $user->tmp = null;
        R::store($user);
        keyboard_home('‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>'.$msg.'</b> –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'.$category['name'].'</b>'); die();
    }
} elseif ($user['display'] == 'reviews') {
    if (array_key_exists('photo', $request->message) or array_key_exists('document', $request->message)) {
        // send('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —É —Å–µ–±—è
        if (!$request->message->photo) {
            $photo = $request->message->document;
            $file_id = $photo->file_id;
        } else {
            $photo = $request->message->photo;
            $file_id = $photo[(count($photo) - 1)]->file_id;
        }
        $rs = copyPhoto(json_decode(api(['file_id' => $file_id], "getFile"), TRUE)['result']['file_path'], 'reviews');
        // send(var_export($rs, true));
        // $rs = getPhoto($photo);
        if ($rs) {
            $photo = R::dispense('reviews');
            $photo->img = $rs;
            R::store($photo);
            $count = R::count('reviews');
            send('‚úÖ <b>–û—Ç–∑—ã–≤ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>
–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: '.$count.'');
            die();
        }
    } else {
        send('‚ô® <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>
–ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
    }
} elseif ($user['display'] == 'new_category1' && $msg) {
    $user->tmp = $msg;
    $user->display = 'new_category2';
    R::store($user);
    send('üî∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>');
} elseif ($user['display'] == 'red_action' && $msg) {
    if (!is_numeric($msg)) {
        send('‚ô® <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>
–ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
    } else {
        $product = R::load('newproducts', $user['tmp']);
        if (!$product) {
            $user->display = null;
            R::store($user);
            keyboard_home('‚ô® <b>–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '.$user['tmp'].' –Ω–µ –Ω–∞–π–¥–µ–Ω</b>'); die();
        } else {
            if ($msg > $product['sum']) {
                send('‚ô® –ê–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ —Ä–µ–∞–ª—å–Ω–æ–π ('.$product['sum'].' –≥—Ä–Ω)
–ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
            }
            $product->old_sum = $product['sum'];
            $product->sum = $msg;
            R::store($product);
            $user->display = null;
            $user->tmp = null;
            R::store($user);
            keyboard_home('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ <b>'.($product['old_sum'] - $msg).' –≥—Ä–Ω ('.round((($product['old_sum'] - $msg)*100)/$product['old_sum']).'%)</b> –Ω–∞ —Ç–æ–≤–∞—Ä <b>'.$product['ad_name'].'</b>'); die();
        }
    }
} elseif ($user['display'] == 'red_price' && $msg) {
    if (!is_numeric($msg)) {
        send('‚ô® <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>
–ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
    } else {
        $product = R::load('newproducts', $user['tmp']);
        if (!$product) {
            $user->display = null;
            R::store($user);
            keyboard_home('‚ô® <b>–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '.$user['tmp'].' –Ω–µ –Ω–∞–π–¥–µ–Ω</b>'); die();
        } else {
            $product->old_sum = null;
            $product->sum = $msg;
            R::store($product);
            $user->display = null;
            $user->tmp = null;
            R::store($user);
            keyboard_home('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ <b>'.$msg.' –≥—Ä–Ω.</b> –Ω–∞ —Ç–æ–≤–∞—Ä <b>'.$product['ad_name'].'</b>'); die();
        }
    }
} elseif ($user['display'] == 'new_category2') {
    if (array_key_exists('photo', $request->message)) {
        send('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —É —Å–µ–±—è
        $rs = getPhoto($request->message->photo, 'images');
        if (!$rs) {
            send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'); die();
            // die();
        }
    } else {
        send('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ)'); die();
    }
    $category = R::dispense('categorys');
    $category->name = $user['tmp'];
    $category->url_name = translit_sef($user['tmp']);
    $category->img = $rs;
    R::store($category);
    $user->display = null;
    $user->tmp = null;
    R::store($user);
    keyboard_home('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'.$category['name'].'</b> —Å–æ–∑–¥–∞–Ω–∞!');
} elseif ($user['display'] == 'link1' && $msg) {
$user->display = 'link2';
$user->tmp = $msg.';@';
R::store($user);
send('üî∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>'); die();
} elseif ($user['display'] == 'link2') {
    if (array_key_exists('photo', $request->message)) {
        send('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —É —Å–µ–±—è
        $rs = getPhoto($request->message->photo);
        if ($rs) {
            send('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
            // die();
        }
    } else {
        send('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'); die();
    }
$user->display = 'link3';
$user->tmp .= $rs.';@';
R::store($user);
send('üî∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b>'); die();
} elseif ($user['display'] == 'link3' && $msg) {
$user->display = 'link4';
$user->tmp .= $msg.';@';
R::store($user);
send('üî∏ <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ: </b><code>–≥–æ—Ç–æ–≤–æ</code>
<em>–î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å youtube</em>'); die();
} elseif ($user['display'] == 'link4') {
    // send(var_export($request->message, true));
    if (array_key_exists('photo', $request->message) or array_key_exists('document', $request->message)) {
        // send('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —É —Å–µ–±—è
        if (!$request->message->photo) {
            $photo = $request->message->document;
            $file_id = $photo->file_id;
        } else {
            $photo = $request->message->photo;
            $file_id = $photo[(count($photo) - 1)]->file_id;
        }
        $rs = copyPhoto(json_decode(api(['file_id' => $file_id], "getFile"), TRUE)['result']['file_path']);
        // $rs = getPhoto($photo);
        if ($rs) {
            $user = R::load('users', $user['id']);
            $user->tmp .= $rs.' ';
            R::store($user);
            $count = count(explode(' ', end(explode(';@', $user['tmp']))))-1;
            send('‚úÖ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: '.$count.'</b>
–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–≥–æ—Ç–æ–≤–æ</code>');
            die();
        }
    } else {
        if ($cmd[0] == '–≥–æ—Ç–æ–≤–æ' or $cmd[0] == '–ì–æ—Ç–æ–≤–æ') {
            if ((count(explode(' ', end(explode(';@', $user['tmp']))))-1) == 0) {
                send('‚ô® –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'); die();
            }
            $user->tmp .= ';@';
            $user->display = 'link5';
            R::store($user);
            send('üî∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä —Ç–æ–≤–∞—Ä–∞ –Ω–∞ youtube, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ </b><code>–ø—Ä–æ–ø—É—Å–∫</code>'); die();
        } else {
            if (stristr($msg, 'youtu.be')) {
                $k = end(explode('/', $msg));
                $user = R::load('users', $user['id']);
                $user->tmp .= 'video$'.$k.' ';
                R::store($user);
                send('‚úÖ <b>–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>
–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–≥–æ—Ç–æ–≤–æ</code>');
                die();
            } elseif (stristr($msg, 'youtube.com/')) {
                $k = explode('v=', $msg)[1];
                if (stristr($msg, '&')) {
                    $k = explode('&', $k)[0];
                }
                $user = R::load('users', $user['id']);
                $user->tmp .= 'video$'.$k.' ';
                R::store($user);
                send('‚úÖ <b>–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>
–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–≥–æ—Ç–æ–≤–æ</code>');
                die();
            }
            // if () {
                
            // }
            send('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'); die();
        } 
    }
    send(var_export($request, true)); die();
} elseif ($user['display'] == 'link5' && $msg) {
	if (stristr($msg, 'youtu.be')) {
        $k = end(explode('/', $msg));
        $user = R::load('users', $user['id']);
        $user->tmp .= ''.$k.';@';
        $user->display = 'link6';
        R::store($user);
        send('‚úÖ <b>–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>');
        die();
    } elseif (stristr($msg, 'youtube.com/')) {
        $k = explode('v=', $msg)[1];
        if (stristr($msg, '&')) {
            $k = explode('&', $k)[0];
        }
        $user = R::load('users', $user['id']);
        $user->tmp .= ''.$k.';@';
        $user->display = 'link6';
        R::store($user);
        send('üî∏ <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>'); die();
    } else {
    	if ($msg == '–ø—Ä–æ–ø—É—Å–∫' or $msg == '–ü—Ä–æ–ø—É—Å–∫') {
    		$user->tmp .= ';@';
        	$user->display = 'link6';
        	R::store($user);
        	send('üî∏ <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>'); die();
    	}
    }
} elseif ($user['display'] == 'link6' && $msg) {
$kk = str_replace(PHP_EOL, '<br>',$msg);
$user->display = 'category';
$user->tmp .= $kk.';@';
R::store($user);
$category = array_values(R::getAll('SELECT * FROM categorys'));
for ($i=0; $category[$i]; $i++) { 
    $keyboard[$i][0]['text'] = 'üìÅ '.$category[$i]['name'];
    $keyboard[$i][0]['callback_data'] = $category[$i]['id'];
}
inline_keyboard('üî∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', $keyboard); die();
} elseif ($user['display'] == 'link7' && $msg) {
$user->display = '';
$ad = R::dispense('newproducts');
// $id = mt_rand(99999999, 999999999999);
//–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–∞–∫–æ–µ –∂–µ —á–∏—Å–ª–æ
// while (R::findOne('products', 'id = ?', array($id))) {
// $id = mt_rand(99999999, 999999999999);
// }
$tmp = explode(';@', $user['tmp']);
$category = explode('|', $tmp[6])[0];
$type = explode('|', $tmp[6])[1];
// $ad->id = $id;
$ad->category = $category;
$ad->childcategory = $tmp[7];
$ad->url_name = translit_sef($tmp[0]);
$ad->type = $type;
$ad->ad_name = $tmp[0];
$ad->img = $tmp[1];
$ad->sum = $tmp[2];
$ad->imgs = $tmp[3];
$ad->video = $tmp[4];
$ad->description = $tmp[5];
$ad->specifications = $msg;
$ad->user_id = $user_id;
$ad->date = date(U);
$ad->disabled = 0;
R::store($ad);
R::store($user);
$keyboard = array(array(array(
'text' => 'üè† –ú–µ–Ω—é',
'callback_data' => 'menu'
)));
keyboard_home('‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üÜî <b>ID/–∞—Ä—Ç–∏–∫—É–ª:</b> '.$ad['id'].'
üîó <b>URL:</b> https://new.instabul.net/product.php?name='.$ad['url_name']); die();
}
if (explode(':', $payload)[0] == 'confirm') {
    $order = R::load('orders', explode(':', $payload)[1]);
    $order->confirmed = 1;
    R::store($order);
    $prod = explode(';', $order['products']);
    for ($i=0; $prod[$i]; $i++) { 
        $pr = explode(':', $prod[$i])[0];
        $pr_count = explode(':', $prod[$i])[1];
        $product = R::load('newproducts', $pr);
        for ($m=0; $m < $pr_count; $m++) { 
            $pur = R::dispense('purchases');
            $pur->product = $pr;
            $pur->client = $order['client'];
            $pur->sum = $product['sum'];
            $pur->date = date('d.m.y');
            R::store($pur);
        }
    }
    send('‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ'.$order['id'].' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>');
}
if ($payload && ($user['display'] == 'category' or $user['display'] == 'category1')) {
    $childcategorys = array_values(R::getAll('SELECT * FROM childcategorys WHERE father = '.$payload));
    if ($payload == 'clear') {
        $payload = null;
    }
    if ($childcategorys && $user['display'] == 'category') {
        $user->display = 'category1';
        $user->tmp .= $payload.';@';
        R::store($user);
        for ($i=0; $childcategorys[$i]; $i++) { 
            $keyboard[$i][0]['text'] = 'üóÇ '.$childcategorys[$i]['name'];
            $keyboard[$i][0]['callback_data'] = $childcategorys[$i]['id'];
        }
        $keyboard[$i][0]['text'] = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°';
        $keyboard[$i][0]['callback_data'] = 'clear';
        inline_keyboard('üî∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', $keyboard); die();
    }
    // if ($payload == 'sinks' && $user['display'] == 'category') {
    //     $user->tmp .= $payload.'|';
    //     $user->display = 'category1';
    //     R::store($user);
    //     $keyboard[0][0]['text'] = '‚úÖ –î–∞';
    //     $keyboard[0][0]['callback_data'] = 'true';
    //     $keyboard[0][1]['text'] = '‚ùå –ù–µ—Ç';
    //     $keyboard[0][1]['callback_data'] = 'false';
    //     inline_keyboard('üî∏ <b>–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—Ä—ã–ª–∞?</b>', $keyboard); die();
    // }
    $user->tmp .= $payload.';@';
    $user->display = 'link7';
    R::store($user);
    send('üî∏ <b>–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞</b>
–ü—Ä–∏–º–µ—Ä: <em>–¢–∏–ø:—à–≤–µ–π–Ω–∞—è;–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:–≠–ª–µ–∫—Ç—Ä–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ;–¢–∏–ø —á–µ–ª–Ω–æ–∫–∞:–ö–∞—á–∞—é—â–∏–π—Å—è;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ—á–µ–∫:21;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤ –ø–µ—Ç–µ–ª—å:1;</em>
<b>–ù–ï —Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –¥–µ–ª–∏–º–µ—Ç—Ä–∞–º–∏</b>'); die();
}
if ($payload or $msg == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' or $msg == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º' or $msg == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or $msg == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏' or $msg == '‚≠ê –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã') {
    if ($payload == 'menu' or $msg == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å') {
    $cmd[0] = '/start';
    }
    if ($payload == 'btn1' or $msg == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä') {
    keyboard_cancel('‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>
–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start
üî∏ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>');
    $user->display = 'link1';
    $user->tmp = '';
    R::store($user);
    die();
    } elseif ($payload == 'btn2' or $msg == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º') {
    $txt = 'üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º</b>';
    $keyboard = array(array(
    array(
    'text' => 'üìÑ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä',
    'callback_data' => 'btn2_1'
    )
    ),
    array(
    array(
    'text' => 'üóë –ê—Ä—Ö–∏–≤',
    'callback_data' => 'btn2_2'
    )
    )
    );
    inline_keyboard($txt, $keyboard);
    die();
    } elseif ($payload == 'btn3' or $msg == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏') {
    $txt = 'üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>';
    $category = array_values(R::getAll('SELECT * FROM categorys'));
    for ($i=0; $category[$i]; $i++) { 
        $keyboard[$i][0]['text'] = 'üìÅ '.$category[$i]['name'];
        $keyboard[$i][0]['callback_data'] = 'category:'.$category[$i]['id'];
    }
    $keyboard[$i][0]['text'] = '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    $keyboard[$i][0]['callback_data'] = 'new_category';
    inline_keyboard($txt, $keyboard);
    die();
    } elseif ($payload == 'btn4' or $msg == '‚≠ê –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã') {
    $keyboard[0][0]['text'] = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
    $user->display = 'reviews';
    R::store($user);
    keyboard('‚≠ê <b>–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã</b>
–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–∑—ã–≤–æ–≤, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"', $keyboard);
    die();
    } elseif (explode(':', $payload)[0] == 'category') {
        $category = R::load('categorys', explode(':', $payload)[1]);
        if ($category) {
        	$childs = array_values(R::getAll('SELECT * FROM childcategorys WHERE father = '.$category['id']));
        	for ($i=0; $childs[$i]; $i++) { 
        		$keyboard[$i][0]['text'] = 'üóÇ '.$childs[$i]['name'];
        		$keyboard[$i][0]['callback_data'] = 'childcategory:'.$childs[$i]['id'];
        	}
            $keyboard[$i][0]['text'] = '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é';
            $keyboard[$i][0]['callback_data'] = 'add_childcategory:'.$category['id'];
            $keyboard[($i+1)][0]['text'] = 'üóë –£–¥–∞–ª–∏—Ç—å';
            $keyboard[($i+1)][0]['callback_data'] = 'category_delete:'.$category['id'];
            $txt = '‚ùì –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π <b>'.$category['name'].'</b>?';
            inline_keyboard($txt, $keyboard); die();
        } else {
            send('Not Find'); die();
        }
    } elseif (explode(':', $payload)[0] == 'add_childcategory') {
            $user->display = 'new_childcategory';
            $user->tmp = explode(':', $payload)[1];
            R::store($user);
            keyboard_cancel('üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>'); die();
    } elseif (explode(':', $payload)[0] == 'category_delete') {
        $category = R::load('categorys', explode(':', $payload)[1]);
        if ($category) {
            $keyboard[0][0]['text'] = '‚úÖ –£–¥–∞–ª–∏—Ç—å';
            $keyboard[0][0]['callback_data'] = 'del_category:'.$category['id'];
            $keyboard[1][0]['text'] = '‚ùé –û—Ç–º–µ–Ω–∞';
            $keyboard[1][0]['callback_data'] = 'cancel';
            $txt = 'üóë –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'.$category['name'].'</b>?
‚ö† <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>';
            inline_keyboard($txt, $keyboard); die();
        }
    } elseif (explode(':', $payload)[0] == 'childcategory') {
        $category = R::load('childcategorys', explode(':', $payload)[1]);
        if ($category) {
            $keyboard[0][0]['text'] = '‚úÖ –£–¥–∞–ª–∏—Ç—å';
            $keyboard[0][0]['callback_data'] = 'del_childcategory:'.$category['id'];
            $keyboard[1][0]['text'] = '‚ùé –û—Ç–º–µ–Ω–∞';
            $keyboard[1][0]['callback_data'] = 'cancel';
            $txt = 'üóë –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'.$category['name'].'</b>?
‚ö† <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>';
            inline_keyboard($txt, $keyboard); die();
        }
    } elseif (explode(':', $payload)[0] == 'del_childcategory') { 
        $category = R::load('childcategorys', explode(':', $payload)[1]);
        if ($category) {
            $cat = $category['name'];
            $products = array_values(R::getAll('SELECT * FROM newproducts WHERE childcategory = '.$category['id']));
            for ($i=0; $products[$i]; $i++) { 
                $p = R::load('newproducts', $products[$i]['id']);
                R::trash($p);
            }
            R::trash($category);
            keyboard_home('‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>'.$cat.'</b> –∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã'); die();
        } else {
            send('Not Find'); die();
        }
    } elseif ($payload == 'new_category') {
            $user->display = 'new_category1';
            R::store($user);
            keyboard_cancel('üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>'); die();
    } elseif (explode(':', $payload)[0] == 'del_category') { 
        $category = R::load('categorys', explode(':', $payload)[1]);
        if ($category) {
            $cat = $category['name'];
            $products = array_values(R::getAll('SELECT * FROM newproducts WHERE category = '.$category['id']));
            for ($i=0; $products[$i]; $i++) { 
                $p = R::load('newproducts', $products[$i]['id']);
                R::trash($p);
            }
            R::trash($category);
            keyboard_home('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'.$cat.'</b> –∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã'); die();
        } else {
            send('Not Find'); die();
        }
    } elseif ($payload == 'cancel') { 
        keyboard_home('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!'); 
    } elseif ($payload == 'btn2_1') {
        $category = array_values(R::getAll('SELECT * FROM categorys'));
        for ($i=0; $category[$i]; $i++) { 
            $keyboard[$i][0]['text'] = 'üìÅ '.$category[$i]['name'];
            $keyboard[$i][0]['callback_data'] = 'btn2_1:'.$category[$i]['id'];
        }
        if ($i == 0) {
            send('‚ùå –ù–∞ —Å–∞–π—Ç–µ –æ—Ç—Å—É—Ü—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ => —Ç–æ–≤–∞—Ä—ã.
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"'); die();
        }
        inline_keyboard('üî∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>', $keyboard); die();
    } elseif (explode(':', $payload)[0] == 'btn2_1') {
    $products = array_values(R::getAll('SELECT * FROM `newproducts` WHERE `disabled` != 1 AND category = '.explode(':', $payload)[1], [0]));
    $category = R::load('categorys', explode(':', $payload)[1]);
    $all = count($products);
    if ($all == 0) {
    send('‚ô® –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'.$category['name'].'</b> –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'); die();
    }
    send('üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "'.$category['name'].'":</b>');
    for ($i=0; $i < $all; $i++) {
    $txt = 'üìã <em>'.$products[$i]['ad_name'].'</em> - <b>'.$products[$i]['sum'].' –≥—Ä–Ω.</b>';
    $keyboard = array(array(
    array(
    'text' => '‚Ñπ –ò–Ω—Ñ–æ',
    'callback_data' => 'info:'.$products[$i]['id']
    )
    )
    );
    inline_keyboard($txt, $keyboard);
    }
    die();
    } elseif (explode(':', $payload)[0] == 'info') {
    $ad = R::load('newproducts', explode(':', $payload)[1]);
    if (!$ad) {
    send('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'); die();
    }
    $orders = array_values(R::getAll('SELECT * FROM purchases WHERE product = '.$ad['id'].''));
    $txt = 'üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
üî∏ <em>'.$ad['ad_name'].'</em>
üí∞ –¶–µ–Ω–∞: <b>'.$ad['sum'].'</b> –≥—Ä–Ω.
üîó <b>ID: </b><code>'.$ad['id'].'</code>
üì¨ <b>–ó–∞–∫–∞–∑–æ–≤: </b><code>'.count($orders).'</code>';
    $keyboard[0][0]['text'] = '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    $keyboard[0][0]['callback_data'] = 'red:'.$ad['id'];
    $keyboard[1][0]['text'] = 'üóë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
    $keyboard[1][0]['callback_data'] = 'disable:'.$ad['id'];
    inline_keyboard($txt, $keyboard); die();
    } elseif ($payload == 'btn2_2') {
    $products = array_values(R::getAll('SELECT * FROM `products` WHERE `disabled` = ?', [1]));
    $all = count($products);
    if ($all == 0) {
    send('‚ô® –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç'); die();
    }
    send('üóë <b>–ê—Ä—Ö–∏–≤:</b>');
    for ($i=0; $i < $all; $i++) {
    $txt = 'üìã <em>'.$products[$i]['ad_name'].'</em> - <b>'.$products[$i]['sum'].' —Ä—É–±.</b>';
    $keyboard = array(array(
    array(
    'text' => '‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
    'callback_data' => 'info1:'.$products[$i]['id']
    )
    ),
    array(
    array(
    'text' => '‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
    'callback_data' => 'enable:'.$products[$i]['id']
    )
    ),
    array(
    array(
    'text' => '‚ùå –£–¥–∞–ª–∏—Ç—å',
    'callback_data' => 'delete:'.$products[$i]['id']
    )
    )
    );
    inline_keyboard($txt, $keyboard);
    }
    die();
    }
    $exp_payload = explode(':', $payload);
    if ($exp_payload[0] == 'disable') {
    $ad = R::load('newproducts', $exp_payload[1]);
    if ($ad['id']) {
    $ad->disabled = 1;
    R::store($ad);
    send('‚úÖ –¢–æ–≤–∞—Ä <b>'.$ad['ad_name'].'</b> –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤'); die();
    } else {
    send('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'); die();
    }
    } elseif ($exp_payload[0] == 'red') {
    if ($exp_payload[1] == 'youtube') {
        $ad = R::load('newproducts', $exp_payload[2]);
        $user->display = 'youtube';
        $user->tmp = $ad['id'];
        send('üé• <b>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (youtube)</b>'); die();
    }
    if ($exp_payload[1] == 'category') {
        $user->display = 'red_category';
        $user->tmp = $exp_payload[2];
        R::store($user);
        $category = array_values(R::getAll('SELECT * FROM categorys'));
        for ($i=0; $category[$i]; $i++) { 
            $keyboard[$i][0]['text'] = 'üìÅ '.$category[$i]['name'];
            $keyboard[$i][0]['callback_data'] = $category[$i]['id'];
        }
        inline_keyboard('üî∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>', $keyboard); die();
    }
    if ($exp_payload[1] == 'price') {
        $user->display = 'red_price';
        $user->tmp = $exp_payload[2];
        R::store($user);
        $ad = R::load('newproducts', $exp_payload[2]);
        send('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>'.$ad['ad_name'].'</b>
üìè –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: '.$ad['sum'].' –≥—Ä–Ω.
[i] –ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
    } elseif ($exp_payload[1] == 'action') {
        if ($exp_payload[2] == 'delete') {
            $ad = R::load('newproducts', $exp_payload[3]);
            $ad->sum = $ad['old_sum'];
            $ad->old_sum = null;
            R::store($ad);
            send('‚úÖ –ê–∫—Ü–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä <b>'.$ad['ad_name'].'</b> —É–¥–∞–ª–µ–Ω–∞!
–ï–≥–æ —Ü–µ–Ω–∞ —Å–µ–π—á–∞—Å: '.$ad['sum'].''); die();
        }
        $ad = R::load('newproducts', $exp_payload[2]);
        $user->display = 'red_action';
        $user->tmp = $exp_payload[2];
        R::store($user);
        send('üìù –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>'.$ad['ad_name'].'</b>
üìè –¶–µ–Ω–∞ –±–µ–∑ –∞–∫—Ü–∏–∏: '.$ad['sum'].' –≥—Ä–Ω.
[i] –ü–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'); die();
    }
    $ad = R::load('newproducts', $exp_payload[1]);
    if ($ad['id']) {
    $keyboard[0][0]['text'] = 'üìà –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É';
    $keyboard[0][0]['callback_data'] = 'red:price:'.$ad['id'];
    $keyboard[1][0]['text'] = 'üì® –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    $keyboard[1][0]['callback_data'] = 'red:category:'.$ad['id'];
    if ($ad['old_sum']) {
        $keyboard[2][0]['text'] = '‚ô® –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ü–∏—é';
        $keyboard[2][0]['callback_data'] = 'red:action:delete:'.$ad['id'];
    } else {
        $keyboard[2][0]['text'] = 'üéâ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫—Ü–∏—é';
        $keyboard[2][0]['callback_data'] = 'red:action:'.$ad['id'];
    }
    $keyboard[3][0]['text'] = 'üé• –°–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä';
    $keyboard[3][0]['callback_data'] = 'red:youtube:'.$ad['id'];
    $orders = array_values(R::getAll('SELECT * FROM purchases WHERE product = '.$ad['id'].''));
    inline_keyboard('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ <b>'.$ad['ad_name'].'</b>
üÜî –ê—Ä—Ç–∏–∫—É–ª: '.$ad['id'].'
üìè –¶–µ–Ω–∞: '.$ad['sum'].' –≥—Ä–Ω.
üì¨ –ó–∞–∫–∞–∑–æ–≤: '.count($orders), $keyboard); die();
    } else {
    send('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'); die();
    }
    } elseif ($exp_payload[0] == 'info1') {
        $ad = R::load('newproducts', $exp_payload[1]);
        $txt = 'üóë <b>–¢–æ–≤–∞—Ä</b> <code>'.$ad['id'].'</code>
üî∏ <em>'.$ad['ad_name'].'</em>
üí∞ –¶–µ–Ω–∞: <b>'.$ad['sum'].'</b> –≥—Ä–Ω.';
        $keyboard = array(array(
        array(
        'text' => '‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
        'callback_data' => 'enable:'.$ad['id']
        )
        ),
        array(
        array(
        'text' => '‚ùå –£–¥–∞–ª–∏—Ç—å',
        'callback_data' => 'delete:'.$ad['id']
        )
        )
        );
        inline_keyboard($txt, $keyboard);
    } elseif ($exp_payload[0] == 'enable') {
    $aka_domen = R::load('settings', 1)->value;
    $ad = R::load('newproducts', $exp_payload[1]);
    if ($ad) {
    $ad->disabled = 0;
    R::store($ad);
    send('‚úÖ –¢–æ–≤–∞—Ä <b>'.$ad['ad_name'].'</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
üîó <b>–ê—Ä—Ç–∏–∫—É–ª: </b><code>'.$ad['id'].'</code>'); die();
    } else {
    send('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); die();
    }
    } elseif ($exp_payload[0] == 'delete') {
    $ad = R::load('newproducts', $exp_payload[1]);
    if ($ad && $ad['id'] != 0) {
    R::trash($ad);
    send('‚úÖ –¢–æ–≤–∞—Ä <b>'.$ad['ad_name'].'</b> –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω');
    die();
    } else {
    send('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'); die();
    }
    }
}
if (array_key_exists('photo', $request->message) or array_key_exists('document', $request->message)) {
    // send('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —É —Å–µ–±—è
    if (!$request->message->photo) {
        $photo = $request->message->document;
        $file_id = $photo->file_id;
    } else {
        $photo = $request->message->photo;
        $file_id = $photo[(count($photo) - 1)]->file_id;
    }
    $rs = copyPhoto(json_decode(api(['file_id' => $file_id], "getFile"), TRUE)['result']['file_path']);
    // $rs = getPhoto($photo);
    if ($rs) {
        $count = count(explode(' ', end(explode(';@', $user['tmp']))))-1;
        send('‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: </b><code>'.$rs.'</code>');
        die();
    }
}
if ($cmd[0] == '!–±–¥') {
if(!$cmd[1]) {
send('üìï <code>!–±–¥ [id] [–∫–æ–ª–æ–Ω–∫–∞]</code>
<b>–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —è—á–µ–π–∫–∏</b>
üìï <code>!–±–¥ –∑–∞–ø–∏—Å–∞—Ç—å [id] [–∫–æ–ª–æ–Ω–∫–∞] [–∑–Ω–∞—á–µ–Ω–∏–µ]</code>
<b>–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —è—á–µ–π–∫—É</b>'); die();
} elseif ($cmd[1] == '–∑–∞–ø–∏—Å–∞—Ç—å') {
$ad = R::load('newproducts', $cmd[2]);
if ($ad) {
if ($cmd[4] && $cmd[4] != 'null' && $cmd[4] != 'NULL') {
for ($i=4; $cmd[$i]; $i++) {
$txt .= $cmd[$i].' ';
}
} else {
$txt = null;
}
$ad[$cmd[3]] = $txt;
R::store($ad);
send('‚öô SQL –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!'); die();
} else {
send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID'); die();
}
} else {
$ad = R::load('newproducts', $cmd[1]);
if ($ad) {
if ($ad[$cmd[2]] == null) {
$ad[$cmd[2]] = 'NULL';
}
send('‚öô –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ <b>'.$cmd[2].'</b>, <b>'.$cmd[1].' ID</b>:
<code>'.$ad[$cmd[2]].'</code>'); die();
} else {
send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID'); die();
}
}
}
//if ($cmd[0] == ...) {}
//end if($user) ...
} else {
if ($chat_id == $user_id) {
if ($msg == 'GO!') {
$user = R::dispense('users');
$user->user_id = $user_id;
$user->date = date(U);
R::store($user); send('ok!'); die();
} else {
send('ERR');
}
}
}
//functions
function send($msg, $reply = false) {
if ($reply == false) {
$reply = null;
}
global $chat_id;
global $token;
$request_params = array(
'text' => $msg,
'reply_to_message_id' => $reply
);
$get_params = http_build_query($request_params);
$s = file_get_contents_curl('https://api.telegram.org/bot'.$token.'/sendMessage?parse_mode=html&chat_id='.$chat_id.'&'.$get_params);
}
function getPhotoPath($file_id) {
    // –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File
    $array = json_decode(api(['file_id' => $file_id], "getFile"), TRUE);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º file_path
    return $array['result']['file_path'];
}
function copyPhoto($file_path, $dir = 'products_img') {
    // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    global $token;
    $file_from_tgrm = "https://api.telegram.org/file/bot".$token."/".$file_path;
    // –¥–æ—Å—Ç–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    $k = explode(".", $file_path);
    $ext = end($k);
    // –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–µ –∏–º—è –∑–¥–µ—Å—å –≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ_—Ñ–∞–π–ª–∞
    $rand = mt_rand(1, 9999);
    $name_our_new_file = time()."_".$rand.".".$ext;
    $result = copy($file_from_tgrm, $dir."/".$name_our_new_file);
    if ($result) {
        return $name_our_new_file;
    } else {
        return false;
    }
//    return error_get_last();
}
// function copyPhoto_r($file_path, $dir = 'reviews/') {
//     // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
//     global $token;
//     $file_from_tgrm = "https://api.telegram.org/file/bot".$token."/".$file_path;
//     // –¥–æ—Å—Ç–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
//     $k = explode(".", $file_path);
//     $ext = end($k);
//     // –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–µ –∏–º—è –∑–¥–µ—Å—å –≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ_—Ñ–∞–π–ª–∞
//     $dir = opendir('reviews/');
//     $count = 0;
//     while($file = readdir($dir)){
//         if($file == '.' || $file == '..' || is_dir('reviews/' . $file)){
//             continue;
//         }
//         $count++;
//     }
//     $name_our_new_file = $count.".".$ext;
//     $result = copy($file_from_tgrm, $dir."/".$name_our_new_file);
//     if ($result) {
//         return $name_our_new_file;
//     } else {
//         return error_get_last();
//         return false;
//     }
// }
function getPhoto($data, $dir = 'products_img'){
    $file_id = $data[(count($data) - 1)]->file_id;
    if (!$file_id) {
        $file_id = $data->file_id;
    }
    // –ø–æ–ª—É—á–∞–µ–º file_path
    $file_path = getPhotoPath($file_id);
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    return copyPhoto($file_path, $dir);
}
function translit_sef($value)
{
    $converter = array(
        '–∞' => 'a',    '–±' => 'b',    '–≤' => 'v',    '–≥' => 'g',    '–¥' => 'd',
        '–µ' => 'e',    '—ë' => 'e',    '–∂' => 'zh',   '–∑' => 'z',    '–∏' => 'i',
        '–π' => 'y',    '–∫' => 'k',    '–ª' => 'l',    '–º' => 'm',    '–Ω' => 'n',
        '–æ' => 'o',    '–ø' => 'p',    '—Ä' => 'r',    '—Å' => 's',    '—Ç' => 't',
        '—É' => 'u',    '—Ñ' => 'f',    '—Ö' => 'h',    '—Ü' => 'c',    '—á' => 'ch',
        '—à' => 'sh',   '—â' => 'sch',  '—å' => '',     '—ã' => 'y',    '—ä' => '',
        '—ç' => 'e',    '—é' => 'yu',   '—è' => 'ya',
    );
 
    $value = mb_strtolower($value);
    $value = strtr($value, $converter);
    $value = mb_ereg_replace('[^-0-9a-z]', '-', $value);
    $value = mb_ereg_replace('[-]+', '-', $value);
    $value = trim($value, '-'); 
 
    return $value;
}
function GetUser($user) {
$id = explode('-', $user);
if (!is_numeric($id[1]) or !$user) {
$s_user = R::findOne('users', 'user_id = ?', array($user));
if (!$s_user) {
$s_user = R::findOne('users', 'nick = ?', array($user));
}
} else {
$s_user = R::load('users', $id[1]);
}
if (!$s_user) {
error(1);
}
return $s_user;
}
function error($error) {
if ($error == 1 or $error == 'find') {
send('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
die('ok');
}
}
function emoji($number) {
if ($number == 0) {
$number = '0‚É£';
} elseif ($number == 1) {
$number = '1‚É£';
} elseif ($number == 2) {
$number = '2‚É£';
} elseif ($number == 3) {
$number = '3‚É£';
} elseif ($number == 4) {
$number = '4‚É£';
} elseif ($number == 5) {
$number = '5‚É£';
} elseif ($number == 6) {
$number = '6‚É£';
} elseif ($number == 7) {
$number = '7‚É£';
} elseif ($number == 8) {
$number = '8‚É£';
} elseif ($number == 9) {
$number = '9‚É£';
} elseif ($number == 10) {
$number = 'üîü';
} else {
$number .= '.';
}
return $number;
}
function txt_users($s) {
$a=substr($s,strlen($s)-1,1);
if($a==1) $str="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é";
if($a==2 || $a==3 || $a==4) $str="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º";
if($a==5 || $a==6 || $a==7 || $a==8 || $a==9 || $a==0 || $s==11 || $s==12 || $s==13 || $s==14 || substr($s, -2)==11 || substr($s, -2)==12 || substr($s, -2)==13 || substr($s, -2)==14) $str="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º";
return $str;
}
function api($array, $method) {
    global $token;
    $get_params = http_build_query($array);
    $context = stream_context_create(array(
        'http' => array('ignore_errors' => true),
    ));
    $result = file_get_contents_curl('https://api.telegram.org/bot'.$token.'/'.$method.'?parse_mode=html&'.$get_params, false, $context);
//    send(var_export($result, true));
    return $result;
}
function inline_keyboard($msg, $keyboard) {
global $chat_id;
global $token;
$request_params = array(
'text' => $msg,
'reply_markup' => json_encode(array('inline_keyboard' => $keyboard))
);
$get_params = http_build_query($request_params);
return file_get_contents_curl('https://api.telegram.org/bot'.$token.'/sendMessage?parse_mode=html&chat_id='.$chat_id.'&'.$get_params);
}
function keyboard($msg, $keyboard) {
global $chat_id;
global $token;
$request_params = array(
'text' => $msg,
'reply_markup' => json_encode(array('keyboard' => $keyboard, 'resize_keyboard' => true))
);
$get_params = http_build_query($request_params);
return file_get_contents_curl('https://api.telegram.org/bot'.$token.'/sendMessage?parse_mode=html&chat_id='.$chat_id.'&'.$get_params);
}
function keyboardRemove($msg) {
global $chat_id;
global $token;
$request_params = array(
'text' => $msg,
'reply_markup' => json_encode(array('remove_keyboard' => true))
);
$get_params = http_build_query($request_params);
return file_get_contents_curl('https://api.telegram.org/bot'.$token.'/sendMessage?parse_mode=html&chat_id='.$chat_id.'&'.$get_params);
}
function keyboard_home($msg = null) {
$keyboard1 = array(array(
array(
'text' => '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
)
),
array(
array(
'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º'
)
),
array(
array(
'text' => 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'
)
),
array(
array(
'text' => '‚≠ê –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã',
)
),
array(
array(
'text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
)
)
);
keyboard($msg, $keyboard1);
}
function keyboard_cancel($msg = null) {
$keyboard1 = array(array(
array(
'text' => '‚ùå –û—Ç–º–µ–Ω–∞'
)
)
);
keyboard($msg, $keyboard1);
}
function send_adm($msg, $die = false) {
$chat_id = $GLOBALS['admin_chat'];
global $token;
$request_params = array(
'text' => $msg
);
$get_params = http_build_query($request_params);
$s = file_get_contents_curl('https://api.telegram.org/bot'.$token.'/sendMessage?parse_mode=html&chat_id='.$chat_id.'&'.$get_params);
if ($die) {
die('ok');
}
}